/*Denne fil indeholder klient kode med hjælpe funktioner, som kan benyttes ethvert sted på siden hvor det er relevant */// Tjek om backend har sat en notifikation som skal vises på sidenif (getCookie('notificationFrontend') !== '') {    let options = JSON.parse(getCookie('notificationFrontend'));    switch (options.type) {        case 'success':            NotificationControl.success(options.title, options.message);            break;        case 'warning':            NotificationControl.warning(options.title, options.message);            break;        case 'error':            NotificationControl.error(options.title, options.message);            break;    }    deleteCookie('notificationFrontend');}// /**//  * Oversættelses funktion til timeago//  * @param number//  * @param index//  * @param totalSec//  * @return {string[]}//  */// const localeFunc = (number, index, totalSec) => {//     return [//         ['for et øjeblik siden', 'om et øjeblik'],//         ['for %s sekunder siden', 'om %s sekunder'],//         ['for 1 minut siden', 'om 1 minut'],//         ['for %s minutter siden', 'om %s minutter'],//         ['for 1 time siden', 'om 1 time'],//         ['for %s timer siden', 'om %s timer'],//         ['for 1 dag siden', 'om 1 dag'],//         ['for %s dage siden', 'om %s dage'],//         ['for 1 uge siden', 'om 1 uge'],//         ['for %s uger siden', 'om %s uger'],//         ['for 1 måned siden', 'om 1 måned'],//         ['for %s måneder siden', 'om %s måneder'],//         ['for 1 år siden', 'om 1 år'],//         ['for %s år siden', 'om %s år']//     ][index];// };/** * Oversættelses funktion til timeago * @param number * @param index * @param totalSec * @return {string[]} */function localeFunc(number, index, totalSec) {    return [        ['for et øjeblik siden', 'om et øjeblik'],        ['for %s sekunder siden', 'om %s sekunder'],        ['for 1 minut siden', 'om 1 minut'],        ['for %s minutter siden', 'om %s minutter'],        ['for 1 time siden', 'om 1 time'],        ['for %s timer siden', 'om %s timer'],        ['for 1 dag siden', 'om 1 dag'],        ['for %s dage siden', 'om %s dage'],        ['for 1 uge siden', 'om 1 uge'],        ['for %s uger siden', 'om %s uger'],        ['for 1 måned siden', 'om 1 måned'],        ['for %s måneder siden', 'om %s måneder'],        ['for 1 år siden', 'om 1 år'],        ['for %s år siden', 'om %s år']    ][index];}/** * Denne funktion skifter en attribut. * Hvis attributten allerede er sat, bliver den fjernet. * Hvis attributten ikke er sat, bliver den tilføjet * @param selector * @param attribute * @param value */function toggleAttr(selector, attribute, value) {    var element = document.querySelector(selector);    if (element.hasAttribute(attribute)) {        element.removeAttribute(attribute);    } else {        element.setAttribute(attribute, value)    }}/** * Returnerer en tilfældig int * @param {int} min * @param {int} max * @returns {int} */function getRandomInteger(min, max) {    return Math.floor(Math.random() * (max - min + 1) ) + min;}/** * Opdaterer <img> element med det nye billede fra <input type="file"> elementet * @param {HTMLInputElement} input * @param {string} imgElementID */function updateImagePreview(input, imgElementID) {    let imgPreview = document.getElementById(imgElementID);    if (input.files && input.files[0]) {        let reader = new FileReader();        reader.onload = function (e) {            imgPreview.setAttribute('src', e.target.result);        };        reader.readAsDataURL(input.files[0]);    }}/** * Opretter en cookie * @param cname Navn på cookie * @param cvalue Cookie værdi * @param exdays Antal dage cookien skal leve */function setCookie(cname, cvalue, exdays) {    var d = new Date();    d.setTime(d.getTime() + (exdays*24*60*60*1000));    var expires = "expires="+ d.toUTCString();    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";}/** * Returnerer værdien af en cookie, hvis den eksisterer * @param cname * @return {string} */function getCookie(cname) {    var name = cname + "=";    var decodedCookie = decodeURIComponent(document.cookie);    var ca = decodedCookie.split(';');    for(var i = 0; i <ca.length; i++) {        var c = ca[i];        while (c.charAt(0) == ' ') {            c = c.substring(1);        }        if (c.indexOf(name) == 0) {            return c.substring(name.length, c.length);        }    }    return "";}/** * Sletter en cookie * @param cname */function deleteCookie(cname) {    document.cookie = cname +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';}/** * Funktion til at tjekke om brugeren er en administrator * Bruges kun til at vise/skjule HTML elementer, som ikke påvirker sikkerheden af siden * @return {boolean} */function isAdmin() {    if (getCookie('RCMS_isAdmin') !== '') {        return getCookie('RCMS_isAdmin') === 'true' || getCookie('RCMS_isAdmin') === '1';    }    return false;}/** * Hjælpe funktion til at animere HTML elementer * @param element * @param animation * @param hideAfter * @param v * @param prefix * @return {Promise<unknown>} */const animateCSS = (element, animation, hideAfter = false, v = false, prefix = 'animate__') =>    new Promise((resolve, reject) => {        const animationName = `${prefix}${animation}`;        let node = null;        if (typeof element === "string") {            node = document.querySelector(element);        } else {            node = element;        }        node.classList.add(`${prefix}animated`, animationName);        function handleAnimationEnd() {            node.classList.remove(`${prefix}animated`, animationName);            resolve('Animation ended');            if (hideAfter === true) {                node.style.display = 'none';            } else if (v === true) {                node.style.visibility = 'hidden';            }        }        node.addEventListener('animationend', handleAnimationEnd, {once: true});});function back(url = '/dashboard') {    if (history.length === 1) {        location.href = url;    } else {        history.back();    }}